{"version":3,"sources":["resources/monthsOfTheYear.js","helpers/dateHelper.js","components/Header.js","components/DayButton.js","resources/daysOfTheWeek.js","resources/theotokia.js","components/ButtonContainer.js","components/CurrentDay.js","components/VerseTypeButton.js","components/MainVerse.js","components/TheotokiaRefPicker.js","components/BibleRefPicker.js","components/TheotokiaGame.js","resources/verses.js","components/BibleVerseGame.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["monthNumber","monthsOfTheYear","0","1","2","3","4","5","6","7","8","9","10","11","CHRISTMAS_MONTH","getChistmasDate","today","Date","todayYear","getFullYear","todayMonth","getMonth","todayDay","getDate","getDaysTillUpcomingChristmas","diffTime","Math","abs","ceil","Header","DayButton","month","day","disabled","onClick","substring","dayNumber","daysOfTheWeek","theotokia","theotokiaVerse","theotokiaDay","theotokiaPart","verseBody","verseBook","verseChapter","verseNumber","partsPerTheotokia","ButtonCotainer","setCurDay","setCurMonth","christmasMonth","startOfAdventMonth","startOfAdventYear","map","info","CurrentDay","VerseTypeButton","isTheotokia","setIsTheotokia","MainVerse","text","TheotokiaRefPicker","correctDay","correctPart","console","log","useState","chosenDay","setChosenDay","chosenPart","setChosenPart","requestedHint","setRequestedHint","partsOptions","Array","from","length","_","i","n","value","label","isCorrectAnswer","type","e","preventDefault","window","open","style","width","placeholder","onChange","options","isDisabled","defaultValue","slice","BibleRefPicker","book","setBook","chapter","setChapter","number","setNumber","TheotokiaGame","chosenBook","setChosenBook","chosenChapter","setChosenChapter","chosenNumber","setChosenNumber","verses","body","commentary","author","VerseGame","Footer","App","curMonth","curDay","ButtonContainer","BibleVerseGame","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.579f435f.chunk.js","sourcesContent":["/**\r\n * This dictionary holds the months of the year as indexed by JS Date.\r\n */\r\n\r\nconst monthsOfTheYear = {\r\n\t0: \"January\",\r\n\t1: \"February\",\r\n\t2: \"March\",\r\n\t3: \"April\",\r\n\t4: \"May\",\r\n\t5: \"June\",\r\n\t6: \"July\",\r\n\t7: \"August\",\r\n\t8: \"September\",\r\n\t9: \"October\",\r\n\t10: \"November\",\r\n\t11: \"December\",\r\n};\r\n\r\nexport const monthNumber = {\r\n\tJanuary: 0,\r\n\tFebruary: 1,\r\n\tMarch: 2,\r\n\tApril: 3,\r\n\tMay: 4,\r\n\tJune: 5,\r\n\tJuly: 6,\r\n\tAugust: 7,\r\n\tSeptember: 8,\r\n\tOctober: 9,\r\n\tNovember: 10,\r\n\tDecember: 11,\r\n};\r\n\r\nexport default monthsOfTheYear;\r\n","/**\r\n * This file contains functions that help with the calculations of the advent and\r\n * christmas dates.\r\n */\r\n\r\nimport { monthNumber } from \"../resources/monthsOfTheYear\";\r\n\r\nconst CHRISTMAS_MONTH = monthNumber.January;\r\nconst CHRISTMAS_DAY = 7;\r\n\r\nconst START_OF_ADVENT_MONTH = monthNumber.November;\r\nconst START_OF_ADVENT_DAY = 25;\r\n\r\nexport const getChistmasDate = () => {\r\n\tconst today = new Date();\r\n\tconst todayYear = today.getFullYear(); // returns number --> yyyy\r\n\tconst todayMonth = today.getMonth(); // returns number from 0 to 11\r\n\tconst todayDay = today.getDate(); // returns number from 1 to 31\r\n\r\n\t// calculate the upcoming year for Christmas\r\n\t// if we are between jan 1 and jan 7, it's this year,\r\n\t// else, it is next year\r\n\tconst christmasYear =\r\n\t\ttodayMonth == CHRISTMAS_MONTH && todayDay <= CHRISTMAS_DAY\r\n\t\t\t? todayYear\r\n\t\t\t: todayYear + 1;\r\n\r\n\tconst christmasDate = new Date(christmasYear, CHRISTMAS_MONTH, CHRISTMAS_DAY);\r\n\r\n\treturn christmasDate;\r\n};\r\n\r\nexport const getStartOfAdventDate = () => {\r\n\tconst today = new Date();\r\n\tconst todayYear = today.getFullYear(); // returns number --> yyyy\r\n\tconst todayMonth = today.getMonth(); // returns number from 0 to 11\r\n\tconst todayDay = today.getDate(); // returns number from 1 to 31\r\n\r\n\t// calculate the previous start of advent day\r\n\t// if today is from jan 1 to 7, start of advent is in the previous year\r\n\t// else, start of advent is in the current year\r\n\tconst startOfAdventYear =\r\n\t\ttodayMonth == CHRISTMAS_MONTH && todayDay <= CHRISTMAS_DAY\r\n\t\t\t? todayYear - 1\r\n\t\t\t: todayYear;\r\n\r\n\tconst startOfAdventDate = new Date(\r\n\t\tstartOfAdventYear,\r\n\t\tSTART_OF_ADVENT_MONTH,\r\n\t\tSTART_OF_ADVENT_DAY\r\n\t);\r\n\r\n\treturn startOfAdventDate;\r\n};\r\n\r\nexport const isInCurAdvent = (date = new Date()) => {\r\n\treturn date >= getStartOfAdventDate() && date <= getChistmasDate();\r\n};\r\n\r\nexport const getDaysTillUpcomingChristmas = () => {\r\n\tconst today = new Date();\r\n\r\n\t// get number of days till christmas\r\n\tconst diffTime = Math.abs(getChistmasDate() - today);\r\n\tconst daysTillChristmas = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n\treturn daysTillChristmas;\r\n};\r\n","/**\r\n * This compoenent stay at the top of the page, it displays the day count till Christmas and\r\n * a verse about the Nativity.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nimport { getDaysTillUpcomingChristmas } from \"../helpers/dateHelper\";\r\n\r\nconst Header = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>{getDaysTillUpcomingChristmas()} days till Christmas</p>\r\n\t\t\t<p>\"Christ is Born, Glorify Him\"</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Header;\r\n","/**\r\n * This button displays a day of the 43 days. It the day has already passed, the button is enabled\r\n * and the user can use it to access that day. If not, the button is grayed out.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nimport monthsOfTheYear from \"../resources/monthsOfTheYear\";\r\n\r\nconst DayButton = ({ month, day, disabled, onClick }) => {\r\n\treturn (\r\n\t\t<button onClick={onClick} disabled={disabled}>\r\n\t\t\t{monthsOfTheYear[month].substring(0, 3)} {day}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default DayButton;\r\n","/**\r\n * This dictionary holds the days of the week as indexed by JS Date.\r\n */\r\n\r\nconst daysOfTheWeek = {\r\n\t0: \"Sunday\",\r\n\t1: \"Monday\",\r\n\t2: \"Tuesday\",\r\n\t3: \"Wednesday\",\r\n\t4: \"Thursday\",\r\n\t5: \"Friday\",\r\n\t6: \"Saturday\",\r\n};\r\n\r\nexport const dayNumber = {\r\n\tSunday: 0,\r\n\tMonday: 1,\r\n\tTuesday: 2,\r\n\tWednesday: 3,\r\n\tThursday: 4,\r\n\tFriday: 5,\r\n\tSaturday: 6,\r\n};\r\n\r\nexport default daysOfTheWeek;\r\n","/**\r\n * This file contains the theotokia data.\r\n */\r\n\r\nimport { monthNumber } from \"./monthsOfTheYear\";\r\nimport { dayNumber } from \"./daysOfTheWeek\";\r\n\r\nconst theotokia = [\r\n\t{\r\n\t\tmonth: monthNumber.November,\r\n\t\tday: 25,\r\n\t\ttheotokiaVerse: \"He took what is ours\",\r\n\t\ttheotokiaDay: dayNumber.Friday,\r\n\t\ttheotokiaPart: 1,\r\n\t\tverseBody: \"verseBody\",\r\n\t\tverseBook: \"gn\",\r\n\t\tverseChapter: 1,\r\n\t\tverseNumber: 1,\r\n\t},\r\n\t{\r\n\t\tmonth: monthNumber.November,\r\n\t\tday: 26,\r\n\t\ttheotokiaVerse: \"and gave us what is His\",\r\n\t\ttheotokiaDay: dayNumber.Friday,\r\n\t\ttheotokiaPart: 1,\r\n\t\tverseBody: \"verseBody\",\r\n\t\tverseBook: \"gn\",\r\n\t\tverseChapter: 1,\r\n\t\tverseNumber: 1,\r\n\t},\r\n\t{\r\n\t\tmonth: monthNumber.January,\r\n\t\tday: 2,\r\n\t\ttheotokiaVerse: \"and exalt Him\",\r\n\t\ttheotokiaDay: dayNumber.Friday,\r\n\t\ttheotokiaPart: 1,\r\n\t\tverseBody: \"verseBody\",\r\n\t\tverseBook: \"gn\",\r\n\t\tverseChapter: 1,\r\n\t\tverseNumber: 1,\r\n\t},\r\n];\r\n\r\nexport default theotokia;\r\n\r\nexport const partsPerTheotokia = {\r\n\t0: 18, // Sunday\r\n\t1: 9, // Monday\r\n\t2: 7, // Tuesday\r\n\t3: 7, // Wednesday\r\n\t4: 9, // Thursday\r\n\t5: 7, // Friday\r\n\t6: 9, // Saturday\r\n};\r\n","/**\r\n * This container has all the buttons of the 43 days.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nimport DayButton from \"./DayButton\";\r\n\r\nimport theotokia from \"../resources/theotokia\";\r\nimport { monthNumber } from \"../resources/monthsOfTheYear\";\r\n\r\nconst ButtonCotainer = ({ setCurDay, setCurMonth }) => {\r\n\tconst today = new Date();\r\n\tconst todayYear = today.getFullYear(); // returns number --> yyyy\r\n\tconst todayMonth = today.getMonth(); // returns number from 0 to 11\r\n\tconst todayDay = today.getDate(); // returns number from 1 to 31\r\n\r\n\tconst christmasMonth = monthNumber.January;\r\n\tconst christmasDay = 7;\r\n\r\n\tconst startOfAdventMonth = monthNumber.November;\r\n\tconst startOfAdventDay = 25;\r\n\r\n\t// calculate the upcoming year for Christmas\r\n\t// if we are between jan 1 and jan 7, it's this year,\r\n\t// else, it is next year\r\n\tconst christmasYear =\r\n\t\ttodayMonth == christmasMonth && todayDay <= christmasDay\r\n\t\t\t? todayYear\r\n\t\t\t: todayYear + 1;\r\n\r\n\tconst christmasDate = new Date(christmasYear, christmasMonth, christmasDay);\r\n\r\n\t// calculate the previous start of advent day\r\n\t// if today is from jan 1 to 7, start of advent is in the previous year\r\n\t// else, start of advent is in the current year\r\n\tconst startOfAdventYear =\r\n\t\ttodayMonth == christmasMonth && todayDay <= christmasDay\r\n\t\t\t? todayYear - 1\r\n\t\t\t: todayYear;\r\n\r\n\tconst startOfAdventDate = new Date(\r\n\t\tstartOfAdventYear,\r\n\t\tstartOfAdventMonth,\r\n\t\tstartOfAdventDay\r\n\t);\r\n\r\n\tconst setCurDate = (month, day) => {\r\n\t\tsetCurMonth(month);\r\n\t\tsetCurDay(day);\r\n\t};\r\n\r\n\t// only allow buttons between the last Nov 25 and the upcoming christmas\r\n\t// TODO make sure this logic works\r\n\tconst isDisabled = (month, day) => {\r\n\t\treturn false;\r\n\t\tconst isInCurAdvent = today >= startOfAdventDate && today <= christmasDate;\r\n\r\n\t\tif (!isInCurAdvent) return true; // disable all buttons if we are not in advent\r\n\r\n\t\tlet proposedDateYear = null;\r\n\t\t//\r\n\t\tif (todayYear == startOfAdventYear) {\r\n\t\t\tif (month == christmasMonth) {\r\n\t\t\t\tproposedDateYear = todayYear + 1;\r\n\t\t\t} else {\r\n\t\t\t\tproposedDateYear = todayYear;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (month == christmasMonth) {\r\n\t\t\t\tproposedDateYear = todayYear;\r\n\t\t\t} else {\r\n\t\t\t\tproposedDateYear = todayYear - 1;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst proposedDate = new Date(proposedDateYear, month, day);\r\n\r\n\t\tconst proposedDateDidNotComeYet = proposedDate > today;\r\n\r\n\t\treturn proposedDateDidNotComeYet;\r\n\t};\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{theotokia.map((info) => (\r\n\t\t\t\t<DayButton\r\n\t\t\t\t\tkey={`btn-${info.month}-${info.day}`}\r\n\t\t\t\t\tmonth={info.month}\r\n\t\t\t\t\tday={info.day}\r\n\t\t\t\t\tonClick={() => setCurDate(info.month, info.day)}\r\n\t\t\t\t\tdisabled={isDisabled(info.month, info.day)}\r\n\t\t\t\t/>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default ButtonCotainer;\r\n","/**\r\n * This component displays the current selected day.\r\n *\r\n * TODO add the coptic date\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nimport monthsOfTheYear from \"../resources/monthsOfTheYear\";\r\n\r\nconst CurrentDay = ({ month, day }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>\r\n\t\t\t\t{monthsOfTheYear[month]} {day}\r\n\t\t\t</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CurrentDay;\r\n","/**\r\n * This simple button switches between the Theotkia mode and the Bible verse mode.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nconst VerseTypeButton = ({ isTheotokia, setIsTheotokia }) => {\r\n\treturn (\r\n\t\t<button onClick={() => setIsTheotokia(!isTheotokia)}>\r\n\t\t\tChange to {isTheotokia ? \"Bible Prophecies and Praises\" : \"Theotokia\"}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default VerseTypeButton;\r\n","/**\r\n * This component displays the text of the main verse.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nconst MainVerse = ({ text }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>{text}</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default MainVerse;\r\n","/**\r\n * This component lets the user choose a day of the week and a part number for the theotokia.\r\n * The part number should change dynamically with the day of the week.\r\n */\r\n\r\nimport React, { useState } from \"react\";\r\n\r\n// partsPerTheotokia[dayOFWeek {0-6}] = numberOfPartsInThisTheotokia\r\nimport { partsPerTheotokia } from \"../resources/theotokia\";\r\nimport daysOfTheWeek from \"../resources/daysOfTheWeek\";\r\n\r\nimport Select from \"react-select\";\r\n\r\nconst TheotokiaRefPicker = ({ correctDay, correctPart }) => {\r\n\tconsole.log(\"correct day\", correctDay);\r\n\tconst [chosenDay, setChosenDay] = useState(null); // start with the user not choosing any day\r\n\tconst [chosenPart, setChosenPart] = useState(0); // start with the user not choosing any part\r\n\r\n\tconst [requestedHint, setRequestedHint] = useState(false); // start with the user not needing a hint\r\n\r\n\tconst dayOptions = [\r\n\t\t{ value: 0, label: \"Sunday\" },\r\n\t\t{ value: 1, label: \"Monday\" },\r\n\t\t{ value: 2, label: \"Tuesday\" },\r\n\t\t{ value: 3, label: \"Wednesday\" },\r\n\t\t{ value: 4, label: \"Thursday\" },\r\n\t\t{ value: 5, label: \"Friday\" },\r\n\t\t{ value: 6, label: \"Saturday\" },\r\n\t];\r\n\r\n\tconst partsOptions = Array.from({ length: 18 }, (_, i) => i + 1).map((n) => ({\r\n\t\tvalue: n,\r\n\t\tlabel: n,\r\n\t}));\r\n\r\n\tconst isCorrectAnswer = chosenDay == correctDay && chosenPart == correctPart;\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p>Can you find this verse in the Psalmody?</p>\r\n\t\t\t<button\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t\tonClick={(e) => {\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\twindow.open(\"https://tasbeha.org/hymn_library/cat/214\");\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\tYou can find the Theotokia in the Psalmody\r\n\t\t\t</button>\r\n\t\t\t<div style={{ width: \"40%\" }}>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tplaceholder=\"Pick a Day\"\r\n\t\t\t\t\tonChange={(e) => setChosenDay(e.value)}\r\n\t\t\t\t\toptions={dayOptions}\r\n\t\t\t\t\tisDisabled={isCorrectAnswer}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div style={{ width: \"40%\" }}>\r\n\t\t\t\t<Select\r\n\t\t\t\t\tplaceholder=\"Pick a Part\"\r\n\t\t\t\t\tdefaultValue={chosenPart}\r\n\t\t\t\t\tonChange={(e) => setChosenPart(e.value)}\r\n\t\t\t\t\toptions={\r\n\t\t\t\t\t\tchosenDay\r\n\t\t\t\t\t\t\t? partsOptions.slice(0, partsPerTheotokia[chosenDay])\r\n\t\t\t\t\t\t\t: partsOptions\r\n\t\t\t\t\t}\r\n\t\t\t\t\tisDisabled={isCorrectAnswer}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t{!isCorrectAnswer && (\r\n\t\t\t\t<button\r\n\t\t\t\t\tdisabled={requestedHint}\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tsetRequestedHint(true);\r\n\t\t\t\t\t\tsetChosenDay(correctDay);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\t{requestedHint\r\n\t\t\t\t\t\t? `It's ${daysOfTheWeek[correctDay]}`\r\n\t\t\t\t\t\t: \"I need a hint!\"}\r\n\t\t\t\t</button>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TheotokiaRefPicker;\r\n","/**\r\n * This component displays three pickers:\r\n * - book names\r\n * - chapter (should dunamically change based on book)\r\n * - number (should dynamically change based on book and chapter)\r\n *\r\n * TODO add ability to request hints --> lock book, then lock chapter, then lock verse\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nconst BibleRefPicker = ({\r\n\tbook,\r\n\tsetBook,\r\n\tchapter,\r\n\tsetChapter,\r\n\tnumber,\r\n\tsetNumber,\r\n}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p> this is a bible ref picker</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default BibleRefPicker;\r\n","/**\r\n * This compoenent shows the user a verse from the theotokia, and asks them to find the day and the part #.\r\n * Then, it asks them to find its source in the Bible and displays the verse when done.\r\n */\r\n\r\nimport React, { useState } from \"react\";\r\n\r\nimport theotokia from \"../resources/theotokia\";\r\n\r\nimport MainVerse from \"./MainVerse\";\r\nimport TheotokiaRefPicker from \"./TheotokiaRefPicker\";\r\nimport BibleRefPicker from \"./BibleRefPicker\";\r\nimport SecondaryVerse from \"./SecondaryVerse\";\r\n\r\nconst TheotokiaGame = ({ day, month }) => {\r\n\tconst info = theotokia[0]; // TODO change this to find the theotokia based on day and month\r\n\r\n\tconst [chosenBook, setChosenBook] = useState(null); // start with the user not choosing any book in the Bible\r\n\tconst [chosenChapter, setChosenChapter] = useState(0); // start with the user not choosing any chapter in any book in the Bible\r\n\tconst [chosenNumber, setChosenNumber] = useState(0); // start with the user not choosing and nymber in any chapter in any book in the Bible\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<MainVerse text={info.theotokiaVerse} />\r\n\t\t\t<TheotokiaRefPicker\r\n\t\t\t\tcorrectDay={info.theotokiaDay}\r\n\t\t\t\tcorrectPart={info.theotokiaPart}\r\n\t\t\t/>\r\n\t\t\t<p>Now, try to find this in a verse in the Bible</p>\r\n\t\t\t<BibleRefPicker\r\n\t\t\t\tbook={chosenBook}\r\n\t\t\t\tsetBook={setChosenBook}\r\n\t\t\t\tchapter={chosenChapter}\r\n\t\t\t\tsetChapter={setChosenChapter}\r\n\t\t\t\tnumber={chosenNumber}\r\n\t\t\t\tsetNumber={setChosenNumber}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TheotokiaGame;\r\n","const verses = [\r\n\t{\r\n\t\tmonth: 11,\r\n\t\tday: 25,\r\n\t\tbody: \"Christ is born\",\r\n\t\tbook: \"Genesis\",\r\n\t\tchapter: 1,\r\n\t\tnumber: 1,\r\n\t\tcommentary: \"Somthing deep\",\r\n\t\tauthor: \"holy father\",\r\n\t},\r\n];\r\n\r\nexport default verses;\r\n","/**\r\n * This compoenent diaplys the body if a verse and the user must find its reference.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nimport verses from \"../resources/verses\";\r\n\r\nimport MainVerse from \"./MainVerse\";\r\nimport BibleRefPicker from \"./BibleRefPicker\";\r\n\r\nconst VerseGame = ({ day, month }) => {\r\n\tconst info = verses[0]; // TODO find this based on day and month\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<MainVerse text={info.body} />\r\n\t\t\t<BibleRefPicker />\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default VerseGame;\r\n","/**\r\n * This is the footer that displays at the bottom of every page.\r\n *\r\n * TODO add a verse, an icon, etc.\r\n */\r\n\r\nimport React from \"react\";\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<p> Made with love from St George and St Abanoub</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header\";\nimport ButtonContainer from \"./components/ButtonContainer\";\nimport CurrentDay from \"./components/CurrentDay\";\nimport VerseTypeButton from \"./components/VerseTypeButton\";\nimport TheotokiaGame from \"./components/TheotokiaGame\";\nimport BibleVerseGame from \"./components/BibleVerseGame\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n\tconst today = new Date();\n\tconst todayMonth = today.getMonth(); // returns number from 0 to 11\n\tconst todayDay = today.getDate(); // returns number from 1 to 31\n\n\tconst [curMonth, setCurMonth] = useState(todayMonth);\n\tconst [curDay, setCurDay] = useState(todayDay);\n\n\tconst [isTheotokia, setIsTheotokia] = useState(true); // start user in theotokia mode, they can switch to bible verse mode\n\n\treturn (\n\t\t<div>\n\t\t\t<Header />\n\t\t\t<ButtonContainer setCurDay={setCurDay} setCurMonth={setCurMonth} />\n\t\t\t<CurrentDay month={curMonth} day={curDay} />\n\t\t\t<VerseTypeButton\n\t\t\t\tisTheotokia={isTheotokia}\n\t\t\t\tsetIsTheotokia={setIsTheotokia}\n\t\t\t/>\n\t\t\t{isTheotokia ? (\n\t\t\t\t<TheotokiaGame day={curDay} month={curMonth} />\n\t\t\t) : (\n\t\t\t\t<BibleVerseGame day={curDay} month={curMonth} />\n\t\t\t)}\n\t\t\t<Footer />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}